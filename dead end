from pyb import ADC
from machine import Pin
from motor import Motor
from ultrasonic import HCSR04

# PID Controller Variables
error = 0.0
prevError = 0.0
P = 0.0  # Proportional: magnitude of correction
I = 0.0  # Integral: rate of correction
D = 0.0  # Derivative: stability of correction

Kp = 0.000060  # Proportional Constant
Ki = 0.000060  # Integral Constant
Kd = 3.000000  # Derivative Constant


# Motor Setup
Duty = [68, 66]  # [0] duty cycle for left motor
                 # [1] duty cycle for right motor
                 #  Numbers aren't the same to provide
                 #  basic straight line ability
motor_left = Motor("left", "D6", "D7", "D4")
motor_left.set_forwards()
motor_right = Motor("right", "D8", "D9", "D5")
motor_right.set_forwards()
# Ultrasonic setup
sensor_ultrasonic = HCSR04("D13", "D12")
# Error as a measurement of distance from the centre of line
# error < 0: left
# error > 0: right
def error():
    test = [0,0,0,0]

    adc_A1 = ADC(Pin('A1'))
    adc_A2 = ADC(Pin('A2'))
    adc_A3 = ADC(Pin('A3'))
    adc_A4 = ADC(Pin('A4'))

    w1 = adc_A1.read()
    w2 = adc_A2.read()
    w3 = adc_A3.read()
    w4 = adc_A4.read()

    if w1 > 1000:
        test[0] = 1
    if w2 > 1000:
        test[1] = 1
    if w2 > 1000:
        test[2] = 1
    if w4 > 1000:
        test[3] = 1

    if test[0] == 0 and test[1] == 0 and test[2] == 0 and test[3] == 1:
        return 3
    elif test[0] == 0 and test[1] == 0 and test[2] == 1 and test[3] == 1:
        return 2
    elif test[0] == 0 and test[1] == 0 and test[2] == 1 and test[3] == 0:
        return 1
    elif test[0] == 0 and test[1] == 1 and test[2] == 1 and test[3] == 0:
        return 0
    elif test[0] == 0 and test[1] == 1 and test[2] == 0 and test[3] == 0:
        return -1
    elif test[0] == 1 and test[1] == 1 and test[2] == 0 and test[3] == 0:
        return -2
    elif test[0] == 1 and test[1] == 0 and test[2] == 0 and test[3] == 0:
        return -3
    else:
        return prevError

# main code
while True:
    if sensor_ultrasonic.distance_mm() > 100:
        motor_left.duty(Duty[0])
        motor_right.duty(Duty[1])

        P = error()
        I += P
        D = P - prevError
        PID = (Kp * P) + (Ki * I) + (Kd * D)


        Duty[0] += PID
        Duty[1] -= PID

        if Duty[0] < 50:
            Duty[0] = 50
        elif Duty[0] > 100:
            Duty[0] = 100
        if Duty[1] < 50:
            Duty[1] = 50
        elif Duty[1] > 100:
            Duty[1] = 100

        print("Left:", Duty[0], "Right:", Duty[1], "Error:", P, "PID:", PID)

        prevError = P
    else:
        test = [0, 0, 0, 0]

        adc_A1 = ADC(Pin('A1'))
        adc_A2 = ADC(Pin('A2'))
        adc_A3 = ADC(Pin('A3'))
        adc_A4 = ADC(Pin('A4'))

        w1 = adc_A1.read()
        w2 = adc_A2.read()
        w3 = adc_A3.read()
        w4 = adc_A4.read()

        if w1 > 1000:
            test[0] = 1
        if w2 > 1000:
            test[1] = 1
        if w2 > 1000:
            test[2] = 1
        if w4 > 1000:
            test[3] = 1
        while test[0] != 0 and test[1] != 1 and test[2] != 1 and test[3] != 0:
            motor_left.duty(-80)
            motor_right.duty(80)
        motor_left.duty(0)
        motor_right.duty(0)
